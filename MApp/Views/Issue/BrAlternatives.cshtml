@using PerpetuumSoft.Knockout
@model MApp.Web.ViewModel.BrAlternativesVM
@{
    ViewBag.Title = Model.Issue.Title + " - Alternatives Brainstorming";
    var ko = Html.CreateKnockoutContext();
}
<script src="~/ckeditor/ckeditor.js"></script>

<h2><span data-bind="text: viewModel.Issue.Title"></span> - Alternatives Brainstorming</h2>


    <table id="alternativesTable" class="table table-condensed table-nonfluid commenttable">
        <thead align="left">
            <tr>
                <th>Name</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody data-bind="foreach: viewModel.Alternatives">
            <tr>
                @if (Model.AccessRight != "V")
                {
                    <td><input data-bind="textInput: Name" class="form-control textbox-name" /></td>
                }
                else
                {
                    <td data-bind="text: Name"></td>
                }
                <td>
                    @if (Model.AccessRight != "V")
                    {
                        <textarea data-bind="textInput: Description" class="form-control textarea-desc"></textarea>
                    }
                    else
                    {
                        <p data-bind="text: Description"></p>
                    }
                    
                    
                    <table class="commenttable" data-bind="attr: { style: Comments().length == 0 ? 'display:none' : 'display:table'}">
                        <tr class="hiddenRow collapse comment commenttable-th">
                            <th>User</th>
                            <th>Comment</th>
                        </tr>
                        <tbody class="hiddenRow collapse comment" data-bind="foreach: Comments">
                            <tr>
                                <td class="commenttable-td commenttable-usercol">
                                    <p data-bind="text: Name" class="commentttable-name"></p>
                                    <p data-bind="text: moment(DateTime()).format('DD.MM.YY HH:mm')"></p>
                                </td>
                                <td data-bind="html: Text" class="commenttable-td commenttable-comment"></td>
                            </tr>
                        </tbody>
                    </table>
                    
                    
                    <div data-bind="attr: { id: 'modal' + Id()}" class="modalDialog">
                        <div>
                            <a href="#close" title="Close" class="closemd">X</a>
                            <h4 data-bind="text: 'Commenting ' + Name()"></h4>

                            <form>
                                <textarea data-bind="attr: { id: 'editor' + Id(), name: 'editor' + Id()}">
                                    
                                </textarea>
                            </form>

                            <button class="btn btn-success" data-bind="attr: { Id: 'saveCommentBtns' + Id(), onClick: 'onSaveCommentClick(' + Id() + ')'}">Save</button>
                        </div>
                    </div>

                </td>
                <td align="center" class="commenttable-btncol">
                    <div data-bind="if: viewModel.AccessRight() != 'V' && viewModel.Issue.Status() != 'FINISHED' && viewModel.Issue.Status() != 'DECIDING' && viewModel.Issue.Status() != 'EVALUATING'">
                        <a class="btn btn-danger btn-xs hyperlink-btn" href="#" data-bind="click: $parent.removeAlternative">Remove</a>
                    </div>
                    <div data-bind="if: Id() > 0">
                        <a data-bind="attr: { href: '#modal' + Id(), Id: 'openModalBtn' + Id() }" class="btn btn-primary btn-xs hyperlink-btn">Add new comment</a>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>

<button id="showCommentsBtn" class="btn btn-primary btn-md accordion-toggle" data-toggle="collapse" data-target=".comment" onclick="onShowCommentClick()">Show comments</button>
@if (Model.AccessRight == "C" || Model.AccessRight == "O")
{
    <button id="addNewAlternative" class="btn btn-primary btn-md" onclick="onAddNewAlternativeClick()" data-bind="enable: viewModel.Issue.Status() =='BRAINSTORMING1' || viewModel.Issue.Status() =='BRAINSTORMING2'">Add new Alternative</button>
    <button id="save" class="btn btn-success btn-md" onclick="onSaveClick()">Save</button>
}
@if (Model.AccessRight == "O")
{
    <button id="nextstage" type="button" class="btn btn-success" onclick="javascript: onNextStageClick()" data-bind="visible: viewModel.Issue.Status() != 'FINISHED' && viewModel.Issue.Status() != 'DECIDING' && viewModel.Issue.Status() != 'EVALUATING'">Next Stage</button>
}



<script>
    var viewModelJs = @Html.Raw(Json.Encode(Model));
    var viewModel = ko.mapping.fromJS(viewModelJs);

    //for (var i = 0; i < viewModelJs.Alternatives.length; i++){
    //    viewModel.Alternatives()[i].Comments = ko.observableArray();
    //    for (var j = 0; j < viewModelJs.Alternatives[i].Comments.length; j++){
    //        var jsComment = viewModelJs.Alternatives[i].Comments[j];
    //        var obsComment = {
    //            DateTime: ko.observable(jsComment.DateTime),
    //            IssueId: ko.observable(jsComment.IssueId),
    //            UserId: ko.observable(jsComment.UserId),
    //            Type: ko.observable(jsComment.Alternative),
    //            Text: ko.observable(jsComment.Text),
    //            Name: ko.observable(jsComment.Name)
    //        }
    //        viewModel.Alternatives()[i].Comments().push(obsComment)
    //    }
    //}

    ko.applyBindings(viewModel);

    renderMenues()

    function onSaveClick() {
        var tmpVM = ko.toJS(viewModel)

        for (var i = 0; i < tmpVM.Alternatives.length; i++){
            for (var j = 0; j < tmpVM.Alternatives[i].Comments.length; j++){
                tmpVM.Alternatives[i].Comments[j].Text = "";
            }
        }

        ko.utils.postJson("", { BrAlternativesVM: tmpVM })
    }

    function onNextStageClick() {
        ko.utils.postJson("/Issue/NextStage", { issueId: viewModel.Issue.Id, status: viewModel.Issue.Status })
    };

    function onAddNewAlternativeClick() {
        var alt = { 
            Id: ko.observable(-1), 
            Name: ko.observable(""), 
            Description: ko.observable(""), 
            IssueId: viewModel.Issue.Id, 
            Reason: 0, 
            Rating: 0,
            Comments: ko.observableArray()
        }
        viewModel.Alternatives.push(alt)
    }

    viewModel.removeAlternative = function () {
        viewModel.Alternatives.remove(this);
        if (typeof this.Id == "function") {
            if (this.Id() > 0) {
                viewModel.DeletedAlternatives.push(this.Id())
            }
        }
    };

    for (var i = 0; i < viewModelJs.Alternatives.length; i++){
        CKEDITOR.replace('editor' + viewModelJs.Alternatives[i].Id,
        {
            customConfig: '/ckeditor/config.js'
        });
    }

    function onSaveCommentClick(altId) {
        var txt = document.getElementById('editor' + altId);
        var d = new Date();
        var n = d.getTime(); 
        var comment =
                {
                    DateTime: n,
                    IssueId: viewModelJs.Issue.Id,
                    UserId: 0,
                    Type: 'Alternative' + altId,
                    Text: CKEDITOR.instances['editor' + altId].getData(),
                    Name: 'Me'
                }
        $.ajax({
            url: '@Url.Action("AddComment", "Issue")',
            type: 'POST',
            contentType: "application/json; charset=utf-8",
            dataType: 'json',
            data: JSON.stringify(comment),
            async: true,
            processData: false,
            complete: function (r) {
                if (r.status = 200) {
                    for (var i = 0; i < viewModelJs.Alternatives.length; i++){
                        if (viewModelJs.Alternatives[i].Id == altId) {
                            var cmt =
                                {
                                    DateTime: ko.observable(n),
                                    IssueId: ko.observable(viewModelJs.Issue.Id),
                                    UserId: ko.observable(0),
                                    Type: ko.observable('Alternative' + altId),
                                    Text: ko.observable(CKEDITOR.instances['editor' + altId].getData()),
                                    Name: ko.observable('Me')
                                }
                            viewModel.Alternatives()[i].Comments.push(cmt);
                        }
                    }

                    CKEDITOR.instances['editor' + altId].setData('');
                    window.location.href = '#close';
                }else{
                    alert("Could not add the comment!" );
                }
            }
        })
        //ko.utils.postJson("/Issue/AddComment",comment)
    }

    var collapsed = true;
    function onShowCommentClick() {
        if (collapsed) {
            document.getElementById('showCommentsBtn').innerText = 'Hide Comments'
            collapsed = false;
        } else {
            document.getElementById('showCommentsBtn').innerText = 'Show Comments'
            collapsed = true;
        }
    }

    $(document).ready(function () {
        //for (var i = 0; i < viewModelJs.Alternatives.length; i++) {
        //    document.getElementById('editorBtnGrp' + viewModelJs.Alternatives[i].Id).attributes["data-target"].value = '#editor' + viewModelJs.Alternatives[i].Id;
        //    $('#editor' + viewModelJs.Alternatives[i].Id).wysiwyg();
        //    $('#editor' + viewModelJs.Alternatives[i].Id).cleanHtml();
        //}
    })
</script>