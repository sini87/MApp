@using PerpetuumSoft.Knockout
@model MApp.Web.ViewModel.CreatingVM
@{
    var ko = Html.CreateKnockoutContext();
    ViewBag.Title = "Issue - " + @Model.Issue.Title;
}
<script src="~/ckeditor/ckeditor.js"></script>

<div class="page-header">
    <h3 data-bind="text: viewModel.Issue.Title"></h3>
</div>

<div class="container">
    <div id ="coreInfos" class="col-md-7">
        <div class="row">
            <label for="titleInput">Title</label>
            <input id="titleInput" class="form-control" data-bind="textInput: viewModel.Issue.Title, enable: viewModel.AccessRight() != 'V'" />
        </div>
        <div class="row">
            <div class="form-inline">
                <label id="issueStatus" data-bind="text: 'Issue Status: ' + viewModel.Issue.Status()" class="status-label"></label>
                <div class="checkbox">
                    <label id="anonymousPostingLabel">
                        <input id="anonymous" type="checkbox" data-bind="checked: viewModel.Issue.AnonymousPosting, enable: viewModel.AccessRight() != 'V'" />
                        Anonymous posting?
                    </label>
                </div>
            </div>
        </div>
        <div class="row">
            <label for="description">Description</label>
            <textarea class="form-control textarea-issuedesc" data-bind="value: viewModel.Issue.Description, enable: viewModel.AccessRight() != 'V'" id="description" name="description"></textarea>
        </div>

        <div class="row">
            <table>
                <tr>
                    <td class="td-top">
                        <label for="selectRootIssue">Parent Issue:</label>
                        <br />
                        <select class="selectpicker" data-live-search="true" id="selectRootIssue" data-bind="options: viewModel.Issues, optionsText: 'Title', optionsValue: 'Id', value: viewModel.Issue.Parent"></select>
                        <br />
                        <a data-bind="text: viewModel.Issue.ParentTitle, attr: {href: '?issueId=' + viewModel.Issue.Parent()}, visible: !viewModel.parentChanged() && viewModel.Issue.ParentTitle() != ''"></a>
                        <a data-bind="text: viewModel.parentDDText, attr: {href: '?issueId=' + viewModel.Issue.Parent()}, visible: viewModel.parentDDText() != 'none' && viewModel.parentChanged"></a>
                    </td>
                    <td class="td-top">
                        <label for="selectdependsOnIssue">Depends on Issue:</label>
                        <br />
                        <select class="selectpicker" data-live-search="true" id="selectdependsOnIssue" data-bind="options: viewModel.Issues, optionsText: 'Title', optionsValue: 'Id', value: viewModel.Issue.DependsOn"></select>
                        <br />
                        <a data-bind="text: viewModel.Issue.DependsOnTitle, attr: {href: '?issueId=' + viewModel.Issue.DependsOn()}, visible: !viewModel.dependsOnChanged() && viewModel.Issue.DependsOnTitle() != ''"></a>
                        <a data-bind="text: viewModel.dependsOnDDText, attr: {href: '?issueId=' + viewModel.Issue.DependsOn()}, visible: viewModel.dependsOnDDText() != 'none' && viewModel.dependsOnChanged"></a>
                    </td>
                </tr>
            </table>

            
        </div>

        <div class="row">
                @if (Model.AccessRight != "V")
                {
                    if (Model.Issue.Status == "CREATING" || Model.Issue.Status == "BRAINSTORMING1")
                    {
                        <form class="form-inline" role="form">
                            <div class="form-group has-feedback" data-bind="attr: {class: viewModel.selfAssessmentCheckHas}">
                                <label for="selfAssessmentV">Selfassessment Value</label>
                                <input class="form-control" id="selfAssessmentV" data-bind="textInput: viewModel.SelfAssessmentValue" onfocus="javascript: onSelfAssessmentFocus()" placeholder="Selfassessment">
                                <span data-bind="attr: {class: viewModel.selfAssessmentCheckIcon }"></span>
                            </div>
                        </form>
                        <form class="form-group-sm" role="form">
                            <div class="form-group">
                                <label for="selfEvaluationD">Description</label>
                                <textarea type="text" class="form-control textarea-desc" id="selfEvaluationD" data-bind="value: viewModel.SelfAssessmentDescription" placeholder="Selfassessment description"></textarea>
                            </div>
                        </form>
                    }
                    else
                    {
                        <label>Selfassessment Value: </label> @Model.SelfAssessmentValue
                        <br />
                        <label>Description:</label>
                        <br />
                        @Model.SelfAssessmentDescription
                    }
                }
        </div>

    </div>

    <div class="col-md-5">
        <div class="phenomenon">
            <div class="row phenomenon-header">
                <label>Phenomenon</label>
                <!-- ko if: viewModel.AccessRight() == 'O' -->
                    <span class="label label-default phenomenon-badge-header" data-bind="text: viewModel.newPhenomenonNotifications, css: { 'label-success': viewModel.newPhenomenonNotifications() == 0, 'label-danger': viewModel.newPhenomenonNotifications() != 0 }"></span>
                <!-- /ko -->
            </div>
            
            @*Groupthink notifications*@
            <div class="row phenomenon-elem" data-bind="if: viewModel.AccessRight() == 'O'">
                <a class="phenomenon-link" data-toggle="modal" data-target="#groupThinkAllNotModalDialog">Grouphtink notifications</a>
                <span class="label phenomenon-badge" data-bind="text: viewModel.newGroupthinkNotifications, css: { 'label-success': viewModel.newGroupthinkNotifications() == 0, 'label-danger': viewModel.newGroupthinkNotifications() != 0 }"></span>
                <div class="modal fade" id="groupThinkAllNotModalDialog" role="dialog">
                    <div class="modal-dialog">
                        <!-- Modal content-->
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal">&times;</button>
                                <h4 class="modal-title">Groupthink notifications</h4>
                            </div>
                            <div class="modal-body">
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <td class="datecolumn">Date</td>
                                            <td>Description</td>
                                            <td>Read</td>
                                        </tr>
                                    </thead>
                                    <tbody data-bind="foreach: viewModel.GroupthinkNotifications">
                                        <tr>
                                            <td data-bind="text: moment(AddedDate()).format('DD.MM.YY HH:mm')"></td>
                                            <td data-bind="text: Text"></td>
                                            <td class="td-center-top">
                                                <!-- ko if: !Read() -->
                                                <input type="checkbox" data-bind="checked: Read, attr: { id: 'gtNotification' + Id(), onClick: 'onGtNotificationChange(' + Id() + ')'}" />
                                                <!-- /ko -->
                                                <!-- ko if: Read() -->
                                                <input type="checkbox" data-bind="checked: Read" disabled />
                                                <!-- /ko -->
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            <div class="modal-footer">
                                
                            </div>
                        </div>

                    </div>
                </div>

            </div>

            @*Groupshift notifications only for owners*@
            <div class="row phenomenon-elem" data-bind="if: viewModel.AccessRight() == 'O'">
                <a class="phenomenon-link" data-toggle="modal" data-target="#groupshiftDialog">Groupshift warning</a>
                <span class="label label-default phenomenon-badge" data-bind="text: viewModel.newGroupshiftNotifications, css: { 'label-success': viewModel.newGroupshiftNotifications() == 0, 'label-danger': viewModel.newGroupshiftNotifications() != 0 }"></span>
                <div class="modal fade" id="groupshiftDialog" role="dialog">
                    <div class="modal-dialog">
                        <!-- Modal content-->
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal">&times;</button>
                                <h4 class="modal-title">Groupshift warnings</h4>
                            </div>
                            <div class="modal-body">
                                <table class="table table-condensed">
                                    <thead>
                                        <th>Property</th>
                                        <th>Users</th>
                                    </thead>
                                    <tbody data-bind="foreach: viewModel.GroupshiftProperties">
                                        <tr>
                                            <td data-bind="text: Key" class="td-top"></td>
                                            <td>
                                                <!-- ko foreach: Value -->
                                                <div data-bind="text: $data"><br/></div>
                                                <!-- /ko -->
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            <div class="modal-footer">

                            </div>
                        </div>

                    </div>
                </div>
            </div>
            @*make groupthink notification only for contributors*@
            <div class="row phenomenon-elem" data-bind="if: viewModel.AccessRight() == 'C'">
                <a class="phenomenon-link" data-toggle="modal" data-target="#makeGTNotifDialog">Send Groupthink notification</a>
                <div class="modal fade" id="makeGTNotifDialog" role="dialog">
                    <div class="modal-dialog">

                        <!-- Modal content-->
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal">&times;</button>
                                <h4 class="modal-title">Send Groupthink notification to issue owner</h4>
                            </div>
                            <div class="modal-body">
                                <div class="form-group">
                                    <textarea id="groupthinkText" class="form-control textarea-desc" rows="5"></textarea>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button id="groupthinkMake" onclick="onGroupthinkMakeClick()" class="btn btn-success">Send notification</button>
                            </div>
                        </div>

                    </div>
                </div>
            </div>

            @*Activity Index*@
            @*Best user in changes*@
            <!-- ko if: viewModel.AccessRight() != 'O'-->
                <div class="row phenomenon-elem" data-bind="text: 'Most changes: ' + viewModel.UserWithMostChanges.Key() + ' ' + viewModel.UserWithMostChanges.Value()"></div>
            <!-- /ko -->
            <!-- ko if: viewModel.AccessRight() == 'O'-->
                <div class="row phenomenon-elem">
                    <a class="phenomenon-link" data-toggle="modal" data-target="#allChangesDialog" data-bind="text: 'Most changes: ' + viewModel.UserWithMostChanges.Key() + ' ' + viewModel.UserWithMostChanges.Value()"></a>
                    <div class="modal fade" id="allChangesDialog" role="dialog">
                        <div class="modal-dialog">
                            <!-- Modal content-->
                            <div class="modal-content">
                                <div class="modal-header">
                                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                                    <h4 class="modal-title">Change Activity of Users</h4>
                                </div>
                                <div class="modal-body">
                                    <table class="table">
                                        <thead>
                                            <th>User</th>
                                            <th>Changes</th>
                                        </thead>
                                        <tbody data-bind="foreach: viewModel.AllUserChangeCounts">
                                            <tr>
                                                <td data-bind="text: Key.Name"></td>
                                                <td data-bind="text: Value"></td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                                <div class="modal-footer">

                                </div>
                            </div>

                        </div>
                    </div>
                </div>
            <!-- /ko -->
            @*Me in Changes*@
            <div class="row phenomenon-elem" data-bind="text: 'My changes ', visible: viewModel.AccessRight() != 'V'">
                <a class="phenomenon-link" data-toggle="modal" data-target="#myChangesDialog" data-bind="text: 'My changes: '"></a>
                <div class="modal fade" id="myChangesDialog" role="dialog">
                    <div class="modal-dialog">
                        <!-- Modal content-->
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal">&times;</button>
                                <h4 class="modal-title">My last changes</h4>
                            </div>
                            <div class="modal-body">
                                
                            </div>
                            <div class="modal-footer">
                                
                            </div>
                        </div>

                    </div>
                </div>
            </div>
            @*Information read/seen*@
            <div class="row phenomenon-elem" data-bind="text: 'read items ' + ' of'">
                <a class="phenomenon-link" data-toggle="modal" data-target="#myInfosToReadDialog" data-bind="text: 'My changes: '"></a>
                <div class="modal fade" id="myInfosToReadDialog" role="dialog">
                    <div class="modal-dialog">
                        <!-- Modal content-->
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal">&times;</button>
                                <h4 class="modal-title">Information which i have not seen</h4>
                            </div>
                            <div class="modal-body">

                            </div>
                            <div class="modal-footer">

                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div> <!-- phenomenon end-->

        <div>
            <label for="tokenfield">Issue Tags</label>
            <input type="text" class="form-control" id="tokenfield" data-bind="enable: viewModel.AccessRight() != 'V'" />
        </div>

        <div class="accessrights-div">
            <h4>Access Rights</h4>
            <p data-bind="visible: viewModelJs.AccessRight == 'O'">
                <select class="selectpicker" data-live-search="true" id="selectUser" data-width="auto" data-bind="options: viewModel.AllUsers, optionsText: 'Name', optionsValue: 'Id', visible: viewModel.AccessRight() == 'O'"></select>
                <select class="selectpicker" id="selectRight" data-width="auto">
                    <option>Contributor</option>
                    <option>Viewer</option>
                    <option>Owner</option>
                </select>
                <button id="addRight" type="button" class="btn btn-primary btn-xs" onclick="javascript: onAddRightClick()" data-bind="visible: viewModelJs.AccessRight == 'O'">Add</button>
            </p>
            <table id="userTable" class="table table-hover table-striped table-condensed">
                <thead align="left">
                    <tr>
                        <th>Name</th>
                        <th>Right</th>
                        <th>Selfassessment</th>
                    </tr>
                </thead>
                <tbody data-bind="foreach: viewModel.AccessRights">
                    <tr>
                        <td>
                            <a class="anchor" data-toggle="modal" data-bind="text: Name, attr: { 'data-target': '#selfassessmentMD' + UserId() }"></a>
                            <div class="modal fade" data-bind="attr: { id: 'selfassessmentMD' + UserId() }" role="dialog">
                                <div class="modal-dialog">
                                    <!-- Modal content-->
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <button type="button" class="mdclose" data-dismiss="modal">&times;</button>
                                            <label class="modal-title h4md" data-bind="text: Name() + ' selfassessment changes'"></label>
                                        </div>
                                        <div class="modal-body">
                                            <table class="table">
                                                <thead>
                                                    <tr>
                                                        <td class="datecolumn">Date</td>
                                                        <td>Value</td>
                                                        <td>Description</td>
                                                    </tr>
                                                </thead>
                                                <tbody data-bind="foreach: SelfAssessmentHistory">
                                                    <tr>
                                                        <td data-bind="text: moment(ChangeDate()).format('DD.MM.YY HH:mm')"></td>
                                                        <td data-bind="text: SelfAssessmentValue"></td>
                                                        <td data-bind="text: SelfAssessmentDescr"></td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>

                                </div>
                            </div>
                        </td>

                        <td data-bind="text: Right"></td>
                        <td class="td-center-top">
                            <div class="ttip">
                                <label data-bind="text: SelfAssessmentValue"></label>
                                <span class="tooltiptext" data-bind="text: SelfAssessmentDescr"></span>
                            </div>
                        </td>
                        <td><a class="btn btn-danger btn-xs" href="#" data-bind="click: $parent.removeRight, visible: viewModelJs.AccessRight == 'O' && UserId() != viewModel.UserId()">Remove</a></td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    
</div>

<div class="row">
    <button id="save" type="button" class="btn btn-primary" onclick="javascript: onSaveClick()" data-bind="visible: viewModelJs.AccessRight == 'O' || viewModelJs.AccessRight == 'C', enable: viewModel.titleEmpty">Save</button>
    <button id="nextstage" type="button" class="btn btn-primary" onclick="javascript: onNextStageClick()" data-bind="visible: viewModel.AccessRight() == 'O', enable: viewModelJs.Issue.Id != -1">Next Stage</button>
    <button id="showCommentsBtn" class="btn btn-primary btn-md accordion-toggle" data-toggle="collapse" data-target=".comment" data-bind="enable: viewModelJs.Issue.Id != -1" onclick="onShowCommentsBtnClick('Issue')">Show comments</button>
    <button id="delete" type="button" class="btn btn-danger" onclick="javascript: onDeleteClick()" data-bind="visible: viewModelJs.AccessRight == 'O', enable: viewModelJs.Issue.Id != -1">Delete</button>
</div>

<h4 class="comment collapse in" data-bind="text: 'Comments: ' + viewModel.Comments().length"></h4> 

<div class="row collapse comment">
    <h4 class="collapse comment">Comments</h4>
    <table class="commenttable" data-bind="attr: { style: viewModel.Comments().length == 0 ? 'display:none' : 'display:table'}">
        <tr class="hiddenRow collapse comment commenttable-th">
            <th>User</th>
            <th>Comment</th>
        </tr>
        <tbody class="hiddenRow collapse comment" data-bind="foreach: viewModel.Comments">
            <tr>
                <td class="commenttable-td commenttable-usercol">
                    <p data-bind="text: Name" class="commentttable-name"></p>
                    <p data-bind="text: moment(DateTime()).format('DD.MM.YY HH:mm')"></p>
                </td>
                <td data-bind="html: Text" class="commenttable-td commenttable-comment"></td>
            </tr>
        </tbody>
    </table>
    <br />
</div>
<div class="row collapse comment">
    <textarea id="editor" name="editor"></textarea>
    <br />
</div>
<div class="row collapse comment">
    <button class="btn btn-primary" id="addCommentBtn" onClick="onAddCommentClick()">Add</button>
    <button id="hideCommentsBtn" class="btn btn-primary btn-md accordion-toggle" data-toggle="collapse" data-target=".comment">Hide comments</button>
</div>

@*signalR reference*@
<script src="~/Scripts/jquery.signalR-2.2.0.min.js"></script>
<script src="~/signalr/hubs"></script>
<script type="text/javascript">
    var addedTags = [];
    var deletedTags = [];
    var viewModelJs = @Html.Raw(Json.Encode(Model));
    var viewModel = ko.mapping.fromJS(viewModelJs);

    viewModel.parentChanged = ko.observable(false);
    viewModel.dependsOnChanged = ko.observable(false);
    viewModel.DeletedAR = ko.observableArray();
    viewModel.AddedAR = ko.observableArray();
    viewModel.selfAssessmentEntered = ko.observable(false)

    for (var i = 0; i < viewModelJs.AccessRights.length; i++){
        if (viewModelJs.AccessRights[i].UserId == viewModelJs.UserId){
            viewModel.AccessRights()[i].SelfAssessmentValue = viewModel.SelfAssessmentValue;
            viewModel.AccessRights()[i].SelfAssessmentDescr = viewModel.SelfAssessmentDescription;
        }
    }

    viewModel.dependsOnDDText = ko.computed(function () {
        return $("#selectdependsOnIssue option[value='" + viewModel.Issue.DependsOn() + "']").text();
    });

    viewModel.parentDDText = ko.computed(function () {
        return $("#selectRootIssue option[value='" + viewModel.Issue.Parent() + "']").text();
    });

    viewModel.selfAssessmentCheckHas = ko.computed(function() {
        if (viewModel.selfAssessmentEntered()){
            if (viewModel.SelfAssessmentValue() >= 1 && viewModel.SelfAssessmentValue() <= 10)
                return 'form-group has-feedback has-success';
            else
                return 'form-group has-feedback has-error';
        }else{
            return 'form-group';
        }
    });

    viewModel.selfAssessmentCheckIcon = ko.computed(function() {
        if (viewModel.selfAssessmentEntered()){
            if (viewModel.SelfAssessmentValue() >= 1 && viewModel.SelfAssessmentValue() <= 10)
                return 'glyphicon glyphicon-ok form-control-feedback';
            else
                return 'glyphicon glyphicon-remove form-control-feedback';
        }
        return 'form-control-feedback'
    });

    if (viewModelJs.Issue.Id == -1){
        viewModel.Issue.Tags = ko.observableArray();
    }

    viewModel.titleEmpty = ko.computed(function(){
        if (viewModel.Issue.Title != null && viewModel.Issue.Title() != null && viewModel.Issue.Title().length > 0){
            return true;
        }else{
            return false;
        }
    });

    //Phenomenon dashboard VM
    viewModel.newGroupthinkNotifications = ko.computed(function(){
        var cnt = 0;
        for (var i = 0; i < viewModel.GroupthinkNotifications().length; i++){
            if (viewModel.GroupthinkNotifications()[i].Read() == false){
                cnt++;
            }
        }
        return cnt;
    });

    viewModel.newGroupshiftNotifications = ko.computed(function(){
        return viewModel.GroupshiftProperties().length;
    });

    viewModel.newPhenomenonNotifications = ko.computed(function(){
        var sum = viewModel.newGroupthinkNotifications() + viewModel.newGroupshiftNotifications();
        return sum;
    });
    //phenomenon dashboard VM end


    ko.applyBindings(viewModel);


    renderMenues()
    makePermissions()

    //event when delete accessright is pressed
    //remove right
    viewModel.removeRight = function () {
        if (viewModel.Issue.Id() != -1){
            var link = this;
            var accessRight = {
                UserId: this.UserId(),
                Right: this.Right(),
                Name: this.Name(),
                SelfAssessmentValue: 0,
                SelfAssessmentDescr: "",
                IssueId: viewModel.Issue.Id()
            }
            $.ajax({
                url: '@Url.Action("RemoveAccessRight", "Issue")',
                type: 'POST',
                contentType: "application/json; charset=utf-8",
                dataType: 'json',
                data: JSON.stringify(accessRight),
                async: true,
                processData: false,
                complete: function (r) {
                    if (r.responseText.match("^StatusCode: 200")) {
                        viewModel.DeletedAR.push({ UserId: accessRight.UserId, Right: accessRight.Right, Name: accessRight.Name });
                        viewModel.AccessRights.remove(link);
                        var u = {
                            Name: ko.observable(accessRight.Name),
                            Id: ko.observable(accessRight.UserId)
                        }
                        viewModel.AllUsers.push(u)
                        $('#selectUser').selectpicker('refresh');
                        reloadGroupshift();
                    } else {
                        $.notify({
                            icon: 'glyphicon glyphicon-danger-sign',
                            title: 'System Notificaion',
                            message: 'Something went wrong. Could not add User!'
                        },{
                            delay: notDelay,
                            type: 'danger',
                            placement: notPlacement,
                            animate: notAnimate
                        });
                    }
                }
            })
        }else{
            viewModel.DeletedAR.push({ UserId: this.UserId(), Right: this.Right(), Name: this.Name() });
            viewModel.AccessRights.remove(this);
            var u = {
                Name: ko.observable(this.Name()),
                Id: ko.observable(this.UserId())
            }
            viewModel.AllUsers.push(u)
            $('#selectUser').selectpicker('refresh');
        }
    };

    $('#selectRootIssue').on('hidden.bs.select', function (e) {
        viewModel.parentChanged(true)
    });

    $('#selectdependsOnIssue').on('hidden.bs.select', function (e) {
        viewModel.dependsOnChanged(true)
    });

    function onSaveClick() {
        var tmpVM = ko.toJS(viewModel)

        tmpVM.AddedTags = addedTags;
        tmpVM.DeletedTags = deletedTags;

        for (i = 0; i < tmpVM.AccessRights.length; i++){
            for (j = 0; j < tmpVM.AccessRights[i].SelfAssessmentHistory.length; j++){
                tmpVM.AccessRights[i].SelfAssessmentHistory[j] = viewModelJs.AccessRights[i].SelfAssessmentHistory[j];
            }
        }

        for (i = 0; i < tmpVM.Comments.length; i++){
            tmpVM.Comments[i].Text = '';
        }

        ko.utils.postJson("/Issue/Creating?issueId=" + tmpVM.Issue.Id, { CreatingVM: tmpVM })
    }

    function onDeleteClick(){
        $.ajax({
            url: '@Url.Action("DeleteIssue","Issue")',
            type: 'POST',
            data: { issueId: viewModel.Issue.Id }
        })
        window.location.replace("http://localhost:15551")
    }

    function onNextStageClick() {
        ko.utils.postJson("/Issue/NextStage", { issueId: viewModel.Issue.Id, status: viewModel.Issue.Status })
    };

    // event on adding a new right
    function onAddRightClick() {
        var uid = $('#selectUser').selectpicker('option:selected').val();
        if (uid != 0) {
            var uText = ""
            for (index = 0; index < viewModel.AllUsers().length; ++index) {
                if (viewModel.AllUsers()[index].Id() == uid) {
                    uText = viewModel.AllUsers()[index].Name()
                }
            }
            var ar = {
                UserId: ko.observable(uid),
                Right: ko.observable($('#selectRight').selectpicker('option :selected').val()),
                Name: ko.observable(uText),
                SelfAssessmentValue: ko.observable(0),
                SelfAssessmentDescr: ko.observable(""),
                SelfAssessmentHistory: ko.observableArray()
            }

            var added = false;
            //is issue is already created then adding new right will be done with ajax
            if (viewModelJs.Issue.Id != -1){
                var accessRight = {
                    UserId: uid,
                    Right: $('#selectRight').selectpicker('option :selected').val(),
                    Name: uText,
                    SelfAssessmentValue: 0,
                    SelfAssessmentDescr: "",
                    IssueId: viewModel.Issue.Id()
                }
                $.ajax({
                    url: '@Url.Action("AddAccessRight", "Issue")',
                    type: 'POST',
                    contentType: "application/json; charset=utf-8",
                    dataType: 'json',
                    data: JSON.stringify(accessRight),
                    async: true,
                    processData: false,
                    complete: function (r) {
                        if (r.responseText.match("^StatusCode: 200")) {
                            viewModel.AccessRights.push(ar);
                            viewModel.AllUsers.splice($('#selectUser').selectpicker('option :selected').index() - 1, 1)
                            $('#selectUser').find('[value=' + uid + ']').remove();
                            $('#selectUser').selectpicker('refresh');

                            viewModel.AddedAR.push({ UserId: uid, Right: $('#selectRight').selectpicker('option :selected').val(), Name: uText });
                            reloadGroupshift()
                        } else {
                            $.notify({
                                icon: 'glyphicon glyphicon-danger-sign',
                                title: 'System Notificaion',
                                message: 'Something went wrong. Could not add User!'
                            },{
                                delay: notDelay,
                                type: 'danger',
                                placement: notPlacement,
                                animate: notAnimate
                            });
                        }
                    }
                })
            }else{
                viewModel.AccessRights.push(ar);
                viewModel.AllUsers.splice($('#selectUser').selectpicker('option :selected').index() - 1, 1)
                $('#selectUser').find('[value=' + uid + ']').remove();
                $('#selectUser').selectpicker('refresh');

                viewModel.AddedAR.push({ UserId: uid, Right: $('#selectRight').selectpicker('option :selected').val(), Name: uText });
            }
            
        } else {
            $.notify({
                icon: 'glyphicon glyphicon-info-sign',
                title: 'Hint',
                message: 'Please select user first!'
            },{
                delay: notDelay,
                type: 'info',
                placement: notPlacement,
                animate: notAnimate
            });
        }

    };

    function onSelfAssessmentFocus(){
        viewModel.selfAssessmentEntered(true);
    };

    function makePermissions(){
        if (viewModelJs.AccessRight == 'V'){
            $('#selectRootIssue').selectpicker('hide');
            $('#selectdependsOnIssue').selectpicker('hide');
        }
    }

    $('.comment').on('hide.bs.collapse', function (e) {
       $('#showCommentsBtn').show();
        
    })
    $('.comment').on('show.bs.collapse	', function (e) {
        $('#showCommentsBtn').hide();
    })

    CKEDITOR.replace('editor',
        {
            customConfig: '/ckeditor/config.js'
        });

    function onAddCommentClick() {
        var txt = document.getElementById('editor');
        var d = new Date();
        var n = d.getTime();
        var comment =
                {
                    DateTime: n,
                    IssueId: viewModelJs.Issue.Id,
                    UserId: 0,
                    Type: 'Issue' + viewModelJs.Issue.Id,
                    Text: CKEDITOR.instances['editor'].getData(),
                    Name: 'Me'
                }
        $.ajax({
            url: '@Url.Action("AddComment", "Issue")',
            type: 'POST',
            contentType: "application/json; charset=utf-8",
            dataType: 'json',
            data: JSON.stringify(comment),
            async: true,
            processData: false,
            complete: function (r) {
                if (r.status = 200) {
                    var cmt =
                        {
                            DateTime: ko.observable(n),
                            IssueId: ko.observable(viewModelJs.Issue.Id),
                            UserId: ko.observable(0),
                            Type: ko.observable('Issue' + viewModelJs.Issue.Id),
                            Text: ko.observable(CKEDITOR.instances['editor'].getData()),
                            Name: ko.observable('Me')   
                        }
                    viewModel.Comments.push(cmt);
                    CKEDITOR.instances['editor'].setData('');
                } else {
                    alert("Could not add the comment!");
                }
            }
        })
    }

    //groupthink event
    function onGroupthinkMakeClick(){
        var notification = 
            {
                Id: -1,
                IssueId: viewModelJs.Issue.Id,
                UserId: 0,
                Type: 'Groupthink',
                Text: document.getElementById('groupthinkText').value,
                Read: false,
                AddedDate: (new Date()).getTime()
            }
        $.ajax({
            url: '@Url.Action("AddNotification", "Issue")',
            type: 'POST',
            contentType: "application/json; charset=utf-8",
            dataType: 'json',
            data: JSON.stringify(notification),
            async: true,
            processData: false,
            complete: function (r) {
                if (r.status = 200) {
                    $('#makeGTNotifDialog').modal('hide');
                    document.getElementById('groupthinkText').value = '';

                    $.notify({
                        icon: 'glyphicon glyphicon-info-sign',
                        title: 'System Notificaion',
                        message: 'Issue owner is notified!'
                    },{
                        delay: notDelay,
                        type: 'info',
                        placement: notPlacement,
                        animate: notAnimate
                    });
                    
                } else {
                    $.notify({
                        icon: 'glyphicon glyphicon-danger-sign',
                        title: 'System Notificaion',
                        message: 'Issue owner is notified!'
                    },{
                        delay: notDelay,
                        type: 'danger',
                        placement: notPlacement,
                        animate: notAnimate
                    });
                }
            }
        })
    }

    function onGtNotificationChange(notId){
        var inputCheckbox = document.getElementById("gtNotification" + notId)
        for (var i = 0; i < viewModel.GroupthinkNotifications().length; i++){
            if (viewModel.GroupthinkNotifications()[i].Id() == notId && inputCheckbox.checked == true){
                $.ajax({
                    url: '/Issue/MarkNotificationAsRead?notificationId=' + notId,
                    type: 'POST',
                    contentType: "application/json; charset=utf-8",
                    async: true,
                    processData: false,
                    complete: function (r) {
                        if (r.status != 200) {
                            alert("Error happend!");
                            viewModel.GroupthinkNotifications()[i].Read(false);
                        }else{
                            viewModel.GroupthinkNotifications()[i].Read(true);
                        }
                    }
                })

                break;
            }
        }
    }

    //this function will be called when an accessright is addedd or removed
    function reloadGroupshift(){
        $.ajax({
            url: '/Issue/GetGroupshiftProperties?issueId=' + viewModelJs.Issue.Id,
            type: 'POST',
            contentType: "application/json; charset=utf-8",
            async: true,
            processData: false,
            complete: function (jqXHR, textStatus) {
                //notific when groupshift
            },
            success: function(data, textStatus, jqXHR){
                viewModel.GroupshiftProperties.removeAll()
                var gP = JSON.parse(data)
                var obs = ko.mapping.fromJS(gP)
                if (data != "[]"){
                    for (var i = 0; i < obs().length; i++){
                        viewModel.GroupshiftProperties.push(obs()[i])
                    }
                }
            },
            error: function(jqXHR, textStatus, errorThrown){

            }
        })
    }

    $(document).ready(function () {
        var token = [];
        var engine;
        var allTags = []

        var status;

        for (var j = 0; j < viewModelJs.AllTags.length; j++) {
            allTags.push({ value: viewModelJs.AllTags[j].Id, label: viewModelJs.AllTags[j].Name })
        }

        var issueTags = []
        if (viewModel.Issue.Id() != -1){
            for (var j = 0; j < viewModel.Issue.Tags().length; j++) {
                issueTags.push({ value: viewModelJs.Issue.Tags[j].Id, label: viewModelJs.Issue.Tags[j].Name })
            }
        }

        $('#tokenfield')
            .tokenfield({
                autocomplete: {
                    source: allTags,
                    delay: 100
                },
                showAutocompleteOnFocus: true
            })
            .tokenfield('setTokens', issueTags)
        ;

        usrProp = viewModel.Issue.Tags();

        $('#tokenfield').on('tokenfield:createtoken', function (e) {
            var tokenExists = false
            for (i = 0; i < usrProp.length; i++) {
                if (usrProp[i].Name == e.attrs.label) {
                    tokenExists = true
                    alert('Property already exists')
                }
            }
            if (tokenExists) {
                event.preventDefault();
                event.stopImmediatePropagation();
                return;
            } else {
                if (e.attrs.label == e.attrs.value) {
                    e.attrs.value = -1
                }
                usrProp.push({ Id: e.attrs.value, Name: e.attrs.label })
                addedTags.push({ Id: e.attrs.value, Name: e.attrs.label })
            }
        });

        $('#tokenfield').on('tokenfield:removedtoken', function (e) {
            var idx;
            for (i = 0; i < usrProp.length; i++) {
                if (usrProp[i].Id > 0 && parseInt(e.attrs.value) == usrProp[i].Id) {
                    idx = i
                } else if (usrProp[i].Name == e.attrs.label) {
                    idx = i
                }

            }
            deletedTags.push({ Id: e.attrs.value, Name: e.attrs.label })
        });
    });

    //SignalR
    $(function () {
        // Reference the auto-generated proxy for the hub.
        var commentHub = $.connection.commentHub;
        // Create a function that the hub can call back to display messages.
        commentHub.client.addNewComment = function (comment) {
            if (comment.Type.startsWith('Issue') && comment.UserId != viewModelJs.UserId){
                var strId = comment.Type.replace("Issue","")
                var id = parseInt(strId)                
                
                comment.DateTime = ko.observable(comment.DateTime)
                viewModel.Comments.push(comment)

                $.notify({
                    icon: 'glyphicon glyphicon-info-sign',
                    title: 'System Notificaion',
                    message: comment.Name + ' added a comment'
                },{
                    delay: notDelay,
                    type: 'info',
                    placement: notPlacementCorner,
                    animate: notAnimateCorner
                });   
            }
        };

        var notificationHub = $.connection.notificationHub;
        notificationHub.client.sendNotification = function(notification) {
            if (viewModel.UserId() != notification.UserId){
                var knotification = {
                    Id:  ko.observable(notification.Id),
                    IssueId: ko.observable(notification.IssueId),
                    UserId: ko.observable(notification.UserId),
                    Type: ko.observable(notification.Type),
                    Text: ko.observable(notification.Text),
                    Read: ko.observable(notification.Read),
                    AddedDate: ko.observable(notification.AddedDate)
                }
                if (notification.Type == 'Groupthink' && viewModelJs.AccessRight == 'O'){
                    viewModel.GroupthinkNotifications.push(knotification)

                    $.notify({
                        icon: 'glyphicon glyphicon-warning-sign',
                        title: 'System Notificaion',
                        message: 'Some user send you a Groupthink warning!'
                    },{
                        delay: notDelay,
                        type: 'danger',
                        placement: notPlacementCorner,
                        animate: notAnimateCorner
                    });
                }
            }
        };

        // Start the connection.
        $.connection.hub.start().done(function () {
            
        });
    })
</script>