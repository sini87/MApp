@using PerpetuumSoft.Knockout
@model MApp.Web.ViewModel.CriteriaWeightsVM
@{
    ViewBag.Title = Model.Issue.Title + " - Criteria Weighting";
    var ko = Html.CreateKnockoutContext();
}
<script src="~/Scripts/ion.rangeSlider.min.js"></script>
<link href="~/Content/normalize.css" type="text/css" rel="stylesheet" />
<link href="~/Content/ion.rangeSlider.css" type="text/css" rel="stylesheet" />
<link href="~/Content/ion.rangeSlider.skinNice.css" type="text/css" rel="stylesheet" />

<div>
    <h3><span data-bind="text: viewModel.Issue.Title"></span></h3>
    <p class="site-subheader">Weight Criteria</p>
    <hr class="myhr" />
</div>

@if (Model.AccessRight != "V" && Model.Issue.Setting == "A")
{
    <span>
        <table id="criteriaWeightsTable" class="table table-hover table-condensed table-nonfluid">
            <thead align="left">
                <tr>
                    <th>Criteria</th>
                    <th>Your Weight</th>
                </tr>
            </thead>
            <tbody data-bind="foreach: viewModel.UserWeights">
                <tr>
                    <td><label data-bind="text: Name" /></td>
                    <td><input data-bind="textInput: Weight, valueUpdate:'afterkeydown', attr: {id: 'CriterionWeight' + CriterionId, disabled: viewModel.Issue.Status() != 'BRAINSTORMING2'}" type="number" min="0" max="100" class="form-control number-in-table" /></td>
                </tr>
            </tbody>
            <tr>
                <td>
                    <label data-bind="css: { error: viewModel.PercentSum() != 100 }">Sum</label>
                </td>
                <td class="number-in-table">
                    <div data-bind="css: { error: viewModel.PercentSum() != 100 }">
                        <span id="sumlbl" data-bind="text: viewModel.WeightSum" class="table-sum" aria-describedby="inputErrors"></span>
                        <label>%</label>
                    </div>
                </td>
                <td>
                    <p data-bind="css: { error: viewModel.PercentSum() != 100 }">
                        <span data-bind="validationMessage: PercentSum" class="validationMessage"></span>
                    </p>
                </td>
            </tr>
        </table>
    </span>
}
else if (Model.Issue.Setting == "B")
{
    <div id="myCarousel" class="carousel slide" data-ride="carousel" data-wrap="false" data-interval="false">
        <!-- Indicators -->
        <ol class="carousel-indicators">
            <li data-target="#myCarousel" data-slide-to="0" class="active"></li>
            <!-- ko foreach: viewModel.PCCriteria-->
                <li data-target="#myCarousel" data-bind="attr: { 'data-slide-to': $index() + 1 }"></li>
            <!-- /ko -->
        </ol>

        <!-- Wrapper for slides -->
        <div class="carousel-inner">
            <div class="item active carouselitem">
                <h3 class="carousel-first" data-bind="text: viewModel.Issue.Status() == 'BRAINSTORMING2' ? 'You have to make ' + viewModel.PCCriteria().length + ' comparisons' : viewModel.PCCriteria().length + ' comparisons'"></h3>
            </div>

            <!-- ko foreach: viewModel.PCCriteria-->
            <div class="item carouselitem">
                <div class="carousel-vert">
                    <div class="carousel-lbldiv">
                        <label class="carousel-leftlabel" data-bind="text: LeftCritName"></label>
                        <label class="carousel-rightlabel" data-bind="text: RightCritName"></label>
                    </div>
                    <div class="carousel-input">
                        <input data-bind="value: Value, attr: { id: 'comparison' + LeftCritId() + ';' + RightCritId()}" data-grid="true" data-grid-num="5"/>
                    </div>
                </div>
            </div>
            <!-- /ko -->
        </div>

        <!-- Left and right controls -->
        <a class="left carousel-control" href="#myCarousel" role="button" data-slide="prev">
            <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
            <span class="sr-only">Previous</span>
        </a>
        <a class="right carousel-control hidden-sm" href="#myCarousel" role="button" data-slide="next">
            <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
            <span class="sr-only">Next</span>
        </a>
    </div>
}
else
{
    <h4>you are not allowed to weight criteria!</h4>
}

@if (Model.Issue.Setting == "A")
{
    <button id="save" class="btn btn-primary btn-md" onclick="onSaveClick()" data-bind="enable: viewModel.PercentSum() == 100, visible: viewModelJs.AccessRight != 'V' && viewModel.Issue.Status() == 'BRAINSTORMING2'">Save</button>
    <button id="next" class="btn btn-primary btn-md" onclick="onNextStageClick()" data-bind="enable: viewModel.PercentSum() == 100, visible: viewModelJs.AccessRight == 'O' && viewModel.Issue.Status() != 'DECIDING' && viewModel.Issue.Status() != 'FINISHED' && viewModel.Issue.Status() != 'CLOSED'">Next Stage</button>
}
else if (Model.Issue.Setting == "B")
{
    <button id="save" class="btn btn-primary btn-md" onclick="onSaveAHPClick()" data-bind="enable: slideViews() >= viewModel.PCCriteria().length, visible: viewModelJs.AccessRight != 'V' && viewModel.Issue.Status() == 'BRAINSTORMING2'">Save</button>
    <button id="next" class="btn btn-primary btn-md" onclick="onNextStageClick()" data-bind="enable: slideViews() >= viewModel.PCCriteria().length, visible: viewModelJs.AccessRight == 'O' && viewModel.Issue.Status() != 'DECIDING' && viewModel.Issue.Status() != 'FINISHED' && viewModel.Issue.Status() != 'CLOSED'">Next Stage</button>
}

<!-- ko if: viewModel.VotedUsers().length == 0-->
<h4>No weights yet!</h4>
<!-- /ko -->
<!-- ko if: viewModel.VotedUsers().length > 0 && viewModel.Issue.AnonymousPosting() == false -->
<table id="critRatingTab" class="table table-hover table-striped table-condensed table-nonfluid">
    <thead>
    <th>User</th>
    <!-- ko foreach: viewModel.UserWeights -->
    <th data-bind="text: Name"></th>
    <!-- /ko -->
    </thead>
    <tbody>
        <!-- ko foreach: viewModel.VotedUsers -->
        <tr>
            <td data-bind="text: Name"></td>
            <!-- ko foreach: UserCriterionWeights -->
            <td data-bind="text: Weight().toFixed(2) + ' %'"></td>
            <!-- /ko -->
        </tr>
        <!-- /ko -->
    </tbody>
</table>
<!-- /ko -->
<!-- ko if: viewModel.VotedUsers().length > 0 && viewModel.Issue.AnonymousPosting() == true -->
<h4 data-bind="text: viewModel.VotedUsers().length + ' users have weighted'"></h4>
<!-- /ko -->

<script src="~/Scripts/jquery.signalR-2.2.0.min.js"></script>
<script src="~/signalr/hubs"></script>
<script>
    var viewModelJs = @Html.Raw(Json.Encode(Model));
    var viewModel = ko.mapping.fromJS(viewModelJs);
    
    //inits for setting A
    if (viewModel.Issue.Setting() == 'A'){
        viewModel.WeightSum = ko.computed(function () {
            var sum = 0;
            for (i = 0; i < viewModel.UserWeights().length; i++) {
                sum = parseFloat(sum) + parseFloat(viewModel.UserWeights()[i].Weight());
            }
            return sum;
        });


        viewModel.PercentSum = ko.computed(function() {
            var total = 0.0;
            for (var i = 0; i < viewModel.UserWeights().length; i++)
            {
                var entry = viewModel.UserWeights()[i];
                total += Number(entry.Weight());
            }
            return total;
        });
        viewModel.hasError = ko.observable(false);
        ko.validation.rules['mustEqual'] = {
            validator: function (val, otherVal) {
                if (val != otherVal){
                    viewModel.hasError(true);
                }else{
                    viewModel.hasError(false);
                }
                return val === otherVal;
            },
            message: 'The field must equal {0}'
        };
        ko.validation.registerExtenders();
        viewModel.PercentSum.extend({ mustEqual: { params: 100, message: "Weight sum must be 100" } });
    }

    //init for setting b
    if(viewModel.Issue.Setting() == 'B'){
        viewModel.slideViews = ko.observable(0)
    }

    ko.applyBindings(viewModel);
    renderMenues()

    var weights = document.querySelectorAll('*[id^="CriterionWeight"]');
    for (i = 0; i < weights.length; i++){
        //weights[i].TouchSpin({
        //    min: 0,
        //    max: 100,
        //    step: 0.1,
        //    decimals: 2,
        //    boostat: 5,
        //    maxboostedstep: 10,
        //    postfix: '%'
        //});
    }

    function onSaveClick() {
        var tmpVM = ko.toJS(viewModel)
        ko.utils.postJson("", { CriteriaWeightsVM: tmpVM })
    }

    function onNextStageClick() {
        ko.utils.postJson("/Issue/NextStage", { issueId: viewModel.Issue.Id, status: viewModel.Issue.Status })
    };

    function onSaveAHPClick(){
        var list = ko.toJS(viewModel.PCCriteria)
        $.ajax({
            url: '/Issue/SaveCriteriaWeightsAHP?issueId=' + viewModel.Issue.Id(),
            type: 'POST',
            contentType: "application/json; charset=utf-8",
            dataType: 'json',
            data: JSON.stringify(list),
            async: true,
            processData: false,
            complete: function (r) {
                if (r.responseText == "True") {
                    $.notify({
                        title: 'Comparisons saved',
                        message: 'Consistency check successful!'
                    },{
                        delay: notDelay,
                        type: 'success',
                        placement: notPlacement,
                        animate: notAnimate
                    });
                } else {
                    $.notify({
                        icon: 'glyphicon glyphicon-danger-sign',
                        title: 'Could not save comparisons!',
                        message: 'Consistency check faild. Seems like you have randomy compared criteria!'
                    },{
                        delay: notDelay,
                        type: 'danger',
                        placement: notPlacement,
                        animate: notAnimate
                    });
                }
            }
        })
    }

    //carousel
    $('#myCarousel').on('slid.bs.carousel', function() {
        viewModel.slideViews(viewModel.slideViews() + 1)
    });

    //sliders
    $(document).ready(function () {
        $('[id^="comparison"]').ionRangeSlider({
            values: viewModelJs.SliderValues
        });
    });

    //SignalR
    $(function () {
        var notificationHub = $.connection.notificationHub;
        // Create a function that the hub can call back to display messages.
        notificationHub.client.updateCriteriaWeights = function (weights, user) {
            if (viewModel.UserId() != user.Id || viewModel.Issue.Setting() == 'B'){
                var result = $.grep(viewModel.VotedUsers(), function (e) { return e.UserId() == user.Id; });
                //new vote
                if (result.length == 0) {
                    var obsW = ko.observableArray()
                    for(var i = 0; i < weights.length; i++){
                        var v = {
                            UserId: ko.observable(user.Id),
                            CriterionId: ko.observable(weights[i].CriterionId),
                            Weight: ko.observable(weights[i].Weight),
                            Name: ko.observable(user.Name)
                        }
                        obsW.push(v)
                    }
                    var userWithCW = {
                        UserId: ko.observable(user.Id),
                        Name: ko.observable(user.Name),
                        UserCriterionWeights: obsW
                    }
                    viewModel.VotedUsers.push(userWithCW)
                    
                    var msg = '';
                    if (viewModel.Issue.AnonymousPosting() == true){
                        msg = 'Some user have weighted'
                    }else{
                        msg = user.Name + ' has weighted!'
                    }

                    $.notify({
                        icon: 'glyphicon glyphicon-info-sign',
                        title: 'System Notificaion',
                        message: msg
                    },{
                        delay: notDelay,
                        type: 'info',
                        placement: notPlacementCorner,
                        animate: notAnimateCorner
                    });
                }else{ //vote updated
                    var userWithCW = result[0]
                    for(var i = 0; i < weights.length; i++){
                        userWithCW.UserCriterionWeights()[i].Weight(parseFloat(weights[i].Weight))
                    }

                    $.notify({
                        icon: 'glyphicon glyphicon-info-sign',
                        title: 'System Notificaion',
                        message: user.Name + ' has updated weights!'
                    },{
                        delay: notDelay,
                        type: 'info',
                        placement: notPlacementCorner,
                        animate: notAnimateCorner
                    });
                }
            }
        };

        userAddedToIssue(notificationHub);
        nextStageNotification(notificationHub)
        
        $.connection.hub.start().done(function () {
            
        });
    })
</script>