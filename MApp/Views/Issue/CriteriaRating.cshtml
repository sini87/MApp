@using PerpetuumSoft.Knockout
@model MApp.Web.ViewModel.CriteriaWeightsVM
@{
    ViewBag.Title = Model.Issue.Title + " - Criteria Weighting";
    var ko = Html.CreateKnockoutContext();
}

<span>
    <table id="criteriaWeightsTable" class="table table-hover table-striped table-condensed table-nonfluid">
        <thead align="left">
            <tr>
                <th>Criteria</th>
                <th>Your Weight</th>
            </tr>
        </thead>
        <tbody data-bind="foreach: viewModel.UserWeights">
            <tr>
                <td><label data-bind="text: Name"/></td>
                <td><input data-bind="textInput: Weight, valueUpdate:'afterkeydown', attr: {id: 'CriterionWeight' + CriterionId}" type="number" min="0" max="100" class="form-control number-in-table"/></td>
            </tr>
        </tbody>
        <tr>
            <td>
                    <label data-bind="css: { error: viewModel.PercentSum() != 100 }">Sum</label>
            </td>
            <td class="number-in-table">
                <div data-bind="css: { error: viewModel.PercentSum() != 100 }">
                    <span id="sumlbl" data-bind="text: viewModel.WeightSum" class="table-sum" aria-describedby="inputErrors"></span>
                    <label>%</label>
                </div>
            </td>
            <td>
                <p data-bind="css: { error: viewModel.PercentSum() != 100 }">
                    <span data-bind="validationMessage: PercentSum" class="validationMessage"></span>
                </p>
            </td>
        </tr>
    </table>
</span>

<button id="save" class="btn btn-success btn-md" onclick="onSaveClick()" data-bind="enable: viewModel.PercentSum() == 100">Save</button>
<button id="nextStageBtn" class="bth btn-success btn-md" onclick="onNextStageClick()" data-bind="enable: viewModel.PercentSum() == 100">Next Stage</button>
<script>
    var viewModelJs = @Html.Raw(Json.Encode(Model));
    var viewModel = ko.mapping.fromJS(viewModelJs);
    viewModel.WeightSum = ko.computed(function () {
        var sum = 0;
        for (i = 0; i < viewModel.UserWeights().length; i++) {
            sum = parseFloat(sum) + parseFloat(viewModel.UserWeights()[i].Weight());
        }
        return sum;
    });


    viewModel.PercentSum = ko.computed(function() {
        var total = 0.0;
        for (var i = 0; i < viewModel.UserWeights().length; i++)
        {
            var entry = viewModel.UserWeights()[i];
            total += Number(entry.Weight());
        }
        return total;
    });
    viewModel.hasError = ko.observable(false);
    ko.validation.rules['mustEqual'] = {
        validator: function (val, otherVal) {
            if (val != otherVal){
                viewModel.hasError(true);
            }else{
                viewModel.hasError(false);
            }
            return val === otherVal;
        },
        message: 'The field must equal {0}'
    };
    ko.validation.registerExtenders();
    viewModel.PercentSum.extend({ mustEqual: { params: 100, message: "Weight sum must be 100" } });

    ko.applyBindings(viewModel);

    renderMenues()

    var weights = document.querySelectorAll('*[id^="CriterionWeight"]');
    for (i = 0; i < weights.length; i++){
        //weights[i].TouchSpin({
        //    min: 0,
        //    max: 100,
        //    step: 0.1,
        //    decimals: 2,
        //    boostat: 5,
        //    maxboostedstep: 10,
        //    postfix: '%'
        //});
    }

    function onSaveClick() {
        var tmpVM = ko.toJS(viewModel)
        ko.utils.postJson("", { CriteriaWeightsVM: tmpVM })
    }

    function onNextStageClick() {
        ko.utils.postJson("/Issue/NextStage", { issueId: viewModel.Issue.Id, status: viewModel.Issue.Status })
    };

    function onAddCommentClick() {

    }

    function renderMenues() {
        var issueId = viewModelJs.Issue.Id;

        if (viewModelJs.Issue.Status == "FINISHED") {
            status = 5
        }
        if (viewModelJs.Issue.Status == "EVALUATING") {
            status = 4
        }
        if (viewModelJs.Issue.Status == "BRAINSTORMING2") {
            status = 3
        } else if (viewModelJs.Issue.Status == "BRAINSTORMING1") {
            status = 2
        } else {
            status = 1
        }

        if (status < 6) {
            var menuElem = document.getElementById("creating-menu")
            for (i = 0; i < menuElem.childNodes.length; i++) {
                if (menuElem.childNodes[i].nodeName == "A") {
                    menuElem.childNodes[i].innerHTML = 'Issue Overview';
                    menuElem.childNodes[i].href = "/Issue/Creating?issueId=" + issueId;
                    break;
                }
            }

            menuElem = document.getElementById("alternatives-menu")
            menuElem.childNodes[0].href = "/Issue/BrAlternatives?issueId=" + issueId;
            menuElem = document.getElementById("criteriafinding-menu")
            menuElem.childNodes[0].href = "/Issue/BrCriteria?issueId=" + issueId;
            menuElem = document.getElementById("criteriarating-menu")
            menuElem.childNodes[0].href = "/Issue/CriteriaRating?issueId=" + issueId;
            menuElem = document.getElementById("evaluating-menu")
            menuElem.childNodes[0].href = "/Issue/Evaluating?issueId=" + issueId;
            menuElem = document.getElementById("evaluating-menu")
            menuElem.childNodes[0].href = "/Issue/finished?issueId=" + issueId;
        }
        if (status < 5) {

            var menuElem = document.getElementById("finished-menu")
            menuElem.className = "disabled"
        }
        if (status < 4) {
            var menuElem = document.getElementById("evaluating-menu")
            menuElem.className = "disabled"
        }
        if (status < 3) {
            var menuElem = document.getElementById("criteriarating-menu")
            menuElem.className = "disabled"

        }
        if (status < 2) {
            var menuElem = document.getElementById("alternatives-menu")
            menuElem.className = "disabled"
            menuElem = document.getElementById("criteriafinding-menu")
            menuElem.className = "disabled"
        }
    }
</script>