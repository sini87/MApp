@using MApp.Middleware.Models
@using PerpetuumSoft.Knockout
@model MApp.Web.ViewModel.EvaluationVM
@{
    ViewBag.Title = Model.Issue.Title + " - Alternatives Evaluation";
    var ko = Html.CreateKnockoutContext();
}

<h2>@Model.Issue.Title - Alternative Evaluation</h2>

@if (Model.AccessRight != "V")
{
    <table id="userRatings" class="table table-hover table-striped table-condensed table-nonfluid">
        <tr>
            <th>Crtieria</th>
            <th>Criteria Weight</th>
            @using (var item = ko.Foreach(m => m.Alternatives))
            {
                <th @item.Bind.Text(m => m.Name)></th>
            }
        </tr>
        <tbody>
            @{ int i = 0; }
            @foreach (var item in Model.Criterias)
            {
             
                <tr>
                    <td class="table-header-column">@item.Name</td>
                    <td class="table-header-column">@String.Format("{0:#0.## %}",item.Weight)</td>
                    @for (int k = 0; k < Model.UserRatings[i].Count;k++)
                    {
                        <td>
                            <input data-bind="textInput: viewModel.UserRatings()[@i][@k].Value" class="form-control"/>
                        </td>
                    }
                
                
                </tr>
                i++;    
            }
        </tbody>
    </table>

    <button id="save" onclick="onClickSave()" class="btn btn-primary btn-md">save</button>
}
@if (Model.AccessRight == "O")
{
    <button id="nextstage" type="button" class="btn btn-primary" onclick="javascript: onNextStageClick()">Next Stage</button>
}

@if (Model.RatedUsers.Count > 0 && Model.Issue.AnonymousPosting == false)
{
    <h3>Ratings of other users</h3>
    <!-- ko foreach: viewModel.RatedUsers -->
        <h4 data-bind="text: Name"></h4>
        <table data-bind="attr: { id: 'userRatingTable' + Id()}" class="table table-hover table-striped table-condensed table-nonfluid">
            <thead>
            <th>Crtieria</th>
            <!-- ko foreach: viewModel.Alternatives -->
                <th data-bind="text: Name"></th>
            <!-- /ko -->
            </thead>
            <tbody data-bind="foreach: viewModel.Criterias">
                    <tr>
                        <td data-bind="text: Name" class="table-header-column"></td>
                        <!-- ko foreach: viewModel.AllRatings-->
                            <!-- ko if: !viewModel.adding() -->
                                <!-- ko if: $parent.Id() == CriterionId() && $parents[1].Id() == UserId() -->
                                    <td data-bind="text: Value"></td>
                                <!-- /ko -->
                            <!-- /ko -->
                        <!-- /ko -->
                    </tr>
            </tbody>
        </table>
    <!-- /ko -->
}else
{
    <h3 data-bind="text: viewModel.RatedUserCnt() + ' other users have rated!'"></h3>
}
<script src="~/Scripts/jquery.signalR-2.2.0.min.js"></script>
<script src="~/signalr/hubs"></script>
<script type="text/javascript">
    var viewModelJs = @Html.Raw(Json.Encode(Model));
    var viewModel = ko.mapping.fromJS(viewModelJs);

    viewModel.adding = ko.observable(false)

    ko.applyBindings(viewModel);
    renderMenues();

    function onClickSave(){
        var tmpVM = ko.toJS(viewModel)
        ko.utils.postJson("", { EvaluationVM: tmpVM })
    }

    function onNextStageClick() {
        ko.utils.postJson("/Issue/NextStage", { issueId: viewModel.Issue.Id, status: viewModel.Issue.Status })
    };

    //SignalR
    $(function () {
        var notificationHub = $.connection.notificationHub;
        // Create a function that the hub can call back to display messages.
        notificationHub.client.updateRatings = function (userRatings, user) {
            if (viewModel.UserId() != user.Id){
                var result = $.grep(viewModel.RatedUsers(), function (e) { return e.Id() == user.Id; });
                //new vote
                if (result.length == 0) {
                    viewModel.adding(true)
                    var obsVotes = ko.observableArray()
                    for(var i = 0; i < userRatings.length; i++){
                        var rat = {
                            CriterionId: ko.observable(userRatings[i].CriterionId),
                            UserId: ko.observable(user.Id),
                            AlternativeId: ko.observable(userRatings[i].AlternativeId),
                            Value: ko.observable(userRatings[i].Value)
                        }
                        viewModel.AllRatings.push(rat)
                    }

                    var usr = {
                        Id: ko.observable(user.Id),
                        Name: ko.observable(user.Name)
                    }
                    viewModel.RatedUsers.push(usr);
                    viewModel.adding(false)

                    if (!viewModelJs.Issue.AnonymousPosting){
                        $.notify({
                            icon: 'glyphicon glyphicon-info-sign',
                            title: 'System Notificaion',
                            message: user.Name + ' has rated!'
                        },{
                            delay: notDelay,
                            type: 'info',
                            placement: notPlacementCorner,
                            animate: notAnimateCorner
                        });
                    }else{
                        viewModel.RatedUserCnt(viewModel.RatedUserCnt() + 1)
                        $.notify({
                            icon: 'glyphicon glyphicon-info-sign',
                            title: 'System Notificaion',
                            message: 'Some user has rated!'
                        },{
                            delay: notDelay,
                            type: 'info',
                            placement: notPlacementCorner,
                            animate: notAnimateCorner
                        });
                    }
                }else{ //vote updated
                    
                    for(var i = 0; i < userRatings.length; i++){
                        var rat = $.grep(viewModel.AllRatings(), function (e) { 
                            return e.UserId() == user.Id;
                        });
                        rat = $.grep(rat, function (e) { 
                            return e.CriterionId() == userRatings[i].CriterionId;
                        });
                        rat = $.grep(rat, function (e) { 
                            return e.AlternativeId() == userRatings[i].AlternativeId;
                        });
                        rat[0].Value(userRatings[i].Value)
                    }

                    if (!viewModelJs.Issue.AnonymousPosting){
                        $.notify({
                            icon: 'glyphicon glyphicon-info-sign',
                            title: 'System Notificaion',
                            message: user.Name + ' has updated ratings!'
                        },{
                            delay: notDelay,
                            type: 'info',
                            placement: notPlacementCorner,
                            animate: notAnimateCorner
                        });
                    }else{
                        $.notify({
                            icon: 'glyphicon glyphicon-info-sign',
                            title: 'System Notificaion',
                            message: 'Some user has updated ratings!'
                        },{
                            delay: notDelay,
                            type: 'info',
                            placement: notPlacementCorner,
                            animate: notAnimateCorner
                        });
                    }
                }
            }
        };
        
        $.connection.hub.start().done(function () {
            
        });
    })
</script>