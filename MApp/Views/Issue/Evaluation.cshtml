@using MApp.Middleware.Models
@using PerpetuumSoft.Knockout
@model MApp.Web.ViewModel.EvaluationVM
@{
    ViewBag.Title = Model.Issue.Title + " - Evaluate Alternatives";
    var ko = Html.CreateKnockoutContext();
}
<script src="~/Scripts/ion.rangeSlider.min.js"></script>
<link href="~/Content/normalize.css" type="text/css" rel="stylesheet" />
<link href="~/Content/ion.rangeSlider.css" type="text/css" rel="stylesheet" />
<link href="~/Content/ion.rangeSlider.skinNice.css" type="text/css" rel="stylesheet" />

<div>
    <h3>@Model.Issue.Title</h3>
    <p class="site-subheader">Evaluate Alternatives</p>
    <hr class="myhr" />
</div>

@if (Model.AccessRight != "V" && Model.Issue.Setting == "A")
{
    <form data-toggle="validator" role="form" id="ratingform">
        <table id="userRatings" class="table table-hover table-striped table-condensed table-nonfluid">
            <tr>
                <th>Crtieria</th>
                <th>Criteria Weight</th>
                @using (var item = ko.Foreach(m => m.Alternatives))
                {
                    <th @item.Bind.Text(m => m.Name)></th>
                }
            </tr>
            <tbody>
                @{ int i = 0; }
                @foreach (var item in Model.Criterias)
                {
                    <tr>
                        <td class="table-header-column">@item.Name</td>
                        <td class="table-header-column">@String.Format("{0:#0.## %}", item.Weight)</td>
                        @for (int k = 0; k < Model.UserRatings[i].Count; k++)
                        {
                            <td>
                                <div class="form-group has-feedback">
                                    <div class="input-group">
                                        @if (Model.Issue.Status == "EVALUATING")
                                        {
                                            <input data-bind="textInput: viewModel.UserRatings()[@i][@k].Value" class="form-control" pattern="\b(1|2|3|4|5|6|7|8|9|10)\b" data-error="Number must be between 1 and 10" />
                                        }else
                                        {
                                            <div data-bind="text: viewModel.UserRatings()[@i][@k].Value"></div>
                                        }

                                    </div>
                                    <span class="glyphicon form-control-feedback" aria-hidden="true"></span>
                                    <div class="help-block with-errors"></div>
                                </div>
                            </td>
                        }
                    </tr>
                    i++;
                }
            </tbody>
        </table>
    </form>
    <button id="save" onclick="onClickSave()" class="btn btn-primary btn-md" data-bind="visible: viewModel.Issue.Status() == 'EVALUATING', enable: viewModel.valid" >save</button>
}
else
{
    <div id="myCarousel" class="carousel slide" data-ride="carousel" data-wrap="false" data-interval="false">
        <!-- Indicators -->
        <ol class="carousel-indicators">
            <li data-target="#myCarousel" data-slide-to="0" class="active"></li>
            <!-- ko foreach: viewModel.PairwiseRatings-->
            <li data-target="#myCarousel" data-bind="attr: { 'data-slide-to': $index() + 1 }"></li>
            <!-- /ko -->
        </ol>

        <!-- Wrapper for slides -->
        <div class="carousel-inner">
            <div class="item active carouselitem">
                <h3 class="carousel-first" data-bind="text: viewModel.Issue.Status() == 'EVALUATING' ? 'You have to make ' + viewModel.PairwiseRatings().length + ' comparisons' : viewModel.PairwiseRatings().length + ' comparisons'"></h3>
            </div>

            <!-- ko foreach: viewModel.PairwiseRatings-->
            <div class="item carouselitem">
                <div class="carousel-vert">
                    <div class="carousel-lbldiv">
                        <table class="carousel-table">
                            <tr>
                                <td class="td-left-top">
                                    <label data-bind="text: LeftAltName"></label>
                                </td>
                                <td class="td-center-top">
                                    <label data-bind="text: CriterionName"></label>
                                </td>
                                <td class="td-right-top">
                                    <label data-bind="text: RightAltName"></label>
                                </td>
                            </tr>
                        </table>
                    </div>
                    <div class="carousel-input">
                        <input data-bind="value: Value, attr: { id: 'comparison' + LeftAltId() + ';' + RightAltId() + ';' + CriterionId() }" data-grid="true" data-grid-num="5" />
                    </div>
                </div>
            </div>
            <!-- /ko -->
        </div>

        <!-- Left and right controls -->
        <a class="left carousel-control" href="#myCarousel" role="button" data-slide="prev">
            <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
            <span class="sr-only">Previous</span>
        </a>
        <a class="right carousel-control hidden-sm" href="#myCarousel" role="button" data-slide="next">
            <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
            <span class="sr-only">Next</span>
        </a>
    </div>
    <button id="save" onclick="onAHPSaveClick()" class="btn btn-primary btn-md" data-bind="visible: viewModel.Issue.Status() == 'EVALUATING'">save</button>
                    }
@if (Model.AccessRight == "O")
{
    <button id="nextstage" type="button" class="btn btn-primary" onclick="javascript: onNextStageClick()" data-bind="visible: viewModel.Issue.Status() != 'FINISHED' && viewModel.Issue.Status() != 'DECIDING' && viewModel.Issue.Status() != 'CLOSED' && viewModel.Issue.Status() != 'FINISHED'">Next Stage</button>
}

<!-- ko if: viewModel.RatedUsers().length > 0 && viewModel.Issue.AnonymousPosting() == false -->
    <h3>Ratings of other users</h3>
    <!-- ko foreach: viewModel.RatedUsers -->
    <h4 data-bind="text: Name"></h4>
        <table data-bind="attr: { id: 'userRatingTable' + Id()}" class="table table-hover table-striped table-condensed table-nonfluid">
            <thead>
            <th>Crtieria</th>
            <!-- ko foreach: viewModel.Alternatives -->
                <th data-bind="text: Name"></th>
            <!-- /ko -->
            </thead>
            <tbody data-bind="foreach: viewModel.Criterias">
                <tr>
                    <td data-bind="text: Name" class="table-header-column"></td>
                    <!-- ko foreach: viewModel.AllRatings-->
                        <!-- ko if: !viewModel.adding() -->
                            <!-- ko if: $parent.Id() == CriterionId() && $parents[1].Id() == UserId() -->
                                <td data-bind="text: Value" class="td-right-top"></td>
                            <!-- /ko -->
                        <!-- /ko -->
                    <!-- /ko -->
                </tr>
            </tbody>
        </table>
    <!-- /ko -->
<!-- /ko -->
<!-- ko if: viewModel.RatedUsers().length == 0 || viewModel.Issue.AnonymousPosting() == true -->
<h3 data-bind="text: viewModel.RatedUserCnt() + ' other users have rated!'"></h3>
<!-- /ko -->



<script src="~/Scripts/jquery.signalR-2.2.0.min.js"></script>
<script src="~/signalr/hubs"></script>
<script type="text/javascript">
    var viewModelJs = @Html.Raw(Json.Encode(Model));
    if (viewModelJs.Issue.Setting == 'B'){
        for (var i = 0; i < viewModelJs.AllRatings.length; i++){
            viewModelJs.AllRatings[i].Value = Math.round(viewModelJs.AllRatings[i].Value * 10000) / 100
        }
    }

    var viewModel = ko.mapping.fromJS(viewModelJs);
    
    viewModel.adding = ko.observable(false)
    if (viewModelJs.Issue.Setting == 'A'){
        viewModel.valid = ko.computed(function(){
            var valid = true;
            for (var i = 0; i < viewModel.UserRatings().length; i++){
                for (var j = 0; j < viewModel.UserRatings()[i].length; j++){
                    var num = viewModel.UserRatings()[i][j].Value()
                    if (!$.isNumeric(num) || num < 1 || num > 10 ){
                        valid = false;
                        break;
                    }
                }
            }
            return valid;
        })
    }
    
    if (viewModelJs.Issue.Setting == 'B'){
        viewModel.slideViews = ko.observable(0)

    }

    ko.applyBindings(viewModel);
    renderMenues();

    function onClickSave(){
        var tmpVM = ko.toJS(viewModel)
        ko.utils.postJson("", { EvaluationVM: tmpVM })
    }

    function onNextStageClick() {
        ko.utils.postJson("/Issue/NextStage", { issueId: viewModel.Issue.Id, status: viewModel.Issue.Status })
    };

    function onAHPSaveClick(){
        var ratings = ko.toJS(viewModel.PairwiseRatings)
        $.ajax({
            url: '/Issue/SaveAlternativeRatingAHP?issueId=' + viewModel.Issue.Id(),
            type: 'POST',
            contentType: "application/json; charset=utf-8",
            dataType: 'json',
            data: JSON.stringify(ratings),
            async: true,
            processData: false,
            complete: function (r) {
                if (r.responseText == "success") {
                    $.notify({
                        title: 'Comparisons saved',
                        message: 'Consistency check successful!'
                    },{
                        delay: notDelay,
                        type: 'success',
                        placement: notPlacement,
                        animate: notAnimate
                    });
                } else {
                    $.notify({
                        icon: 'glyphicon glyphicon-danger-sign',
                        title: 'Could not save comparisons!',
                        message: r.responseText
                    },{
                        delay: notDelay,
                        type: 'danger',
                        placement: notPlacement,
                        animate: notAnimate
                    });
                }
            }
        })
    }

    //carousel
    $('#myCarousel').on('slid.bs.carousel', function() {
        viewModel.slideViews(viewModel.slideViews() + 1)
    });

    //sliders
    $(document).ready(function () {
        $('[id^="comparison"]').ionRangeSlider({
            values: viewModelJs.SliderValues
        });
    });

    //SignalR
    $(function () {
        var notificationHub = $.connection.notificationHub;
        // Create a function that the hub can call back to display messages.
        notificationHub.client.updateRatings = function (userRatings, user) {
            if (viewModel.UserId() != user.Id || viewModel.Issue.Setting() == 'B'){
                var result = $.grep(viewModel.RatedUsers(), function (e) { return e.Id() == user.Id; });
                //new vote
                if (result.length == 0) {
                    viewModel.adding(true)
                    var val = ''
                    var obsVotes = ko.observableArray()
                    for(var i = 0; i < userRatings.length; i++){
                        if (viewModel.Issue.Setting() == 'A'){
                            val = userRatings[i].Value
                        }else{
                            val = Math.round(userRatings[i].Value * 10000) / 100
                        }
                        var rat = {
                            CriterionId: ko.observable(userRatings[i].CriterionId),
                            UserId: ko.observable(user.Id),
                            AlternativeId: ko.observable(userRatings[i].AlternativeId),
                            Value: ko.observable(val)
                        }
                        viewModel.AllRatings.push(rat)
                    }

                    var usr = {
                        Id: ko.observable(user.Id),
                        Name: ko.observable(user.Name)
                    }
                    viewModel.RatedUsers.push(usr);
                    viewModel.adding(false)

                    if (!viewModelJs.Issue.AnonymousPosting){
                        $.notify({
                            icon: 'glyphicon glyphicon-info-sign',
                            title: 'System Notificaion',
                            message: user.Name + ' has rated!'
                        },{
                            delay: notDelay,
                            type: 'info',
                            placement: notPlacementCorner,
                            animate: notAnimateCorner
                        });
                    }else{
                        viewModel.RatedUserCnt(viewModel.RatedUserCnt() + 1)
                        $.notify({
                            icon: 'glyphicon glyphicon-info-sign',
                            title: 'System Notificaion',
                            message: 'Some user has rated!'
                        },{
                            delay: notDelay,
                            type: 'info',
                            placement: notPlacementCorner,
                            animate: notAnimateCorner
                        });
                    }
                }else{ //vote updated
                    
                    for(var i = 0; i < userRatings.length; i++){
                        var rat = $.grep(viewModel.AllRatings(), function (e) { 
                            return e.UserId() == user.Id;
                        });
                        rat = $.grep(rat, function (e) { 
                            return e.CriterionId() == userRatings[i].CriterionId;
                        });
                        rat = $.grep(rat, function (e) { 
                            return e.AlternativeId() == userRatings[i].AlternativeId;
                        });
                        if (viewModel.Issue.Setting() == 'B'){
                            rat[0].Value(Math.round(userRatings[i].Value * 10000) / 100)
                        }else{
                            rat[0].Value(userRatings[i].Value)
                        }
                        
                    }

                    if (!viewModelJs.Issue.AnonymousPosting){
                        $.notify({
                            icon: 'glyphicon glyphicon-info-sign',
                            title: 'System Notificaion',
                            message: user.Name + ' has updated ratings!'
                        },{
                            delay: notDelay,
                            type: 'info',
                            placement: notPlacementCorner,
                            animate: notAnimateCorner
                        });
                    }else{
                        $.notify({
                            icon: 'glyphicon glyphicon-info-sign',
                            title: 'System Notificaion',
                            message: 'Some user has updated ratings!'
                        },{
                            delay: notDelay,
                            type: 'info',
                            placement: notPlacementCorner,
                            animate: notAnimateCorner
                        });
                    }
                }
            }
        };
        
        userAddedToIssue(notificationHub);
        nextStageNotification(notificationHub)

        $.connection.hub.start().done(function () {
            
        });
    })
</script>