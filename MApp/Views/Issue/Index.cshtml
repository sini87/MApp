@using PerpetuumSoft.Knockout
@model KeyValuePair<int, List<MApp.Middleware.Models.UserIssueModel>>
@{
    ViewBag.Title = "Issue Overvies";
    var ko = Html.CreateKnockoutContext();
}

<div class="page-header">
    <h2>Issue Overview</h2>
</div>

<table id="issueTable" class="tree table table-hover table-striped table-condensed">
    <thead>
        <tr>
            <th>Issue</th>
            <th class="td-center-top">Status</th>
            <th class="td-center-top">Action Required</th>
            <th>Unseen Infos</th>
            <th>Tags</th>
        </tr>
    </thead>
    <tbody data-bind="foreach: viewModel">
        <tr data-bind="css: treegrid, attr: { id: 'node-' + Issue.Id() }">
            <td><a data-bind="text: Issue.Title, attr: { href: '/Issue/Creating?issueId=' + Issue.Id() }"></a></td>
            <td class="td-center-top">
                <!-- ko if: Issue.Status() == 'CREATING' -->
                    <a data-bind="attr: { href: '/Issue/Creating?issueId=' + Issue.Id() }">Creating</a> 
                <!-- /ko -->
                <!-- ko if: Issue.Status() == 'BRAINSTORMING1' -->
                    <p>Brainstorming</p>
                    <a data-bind="attr: { href: '/Issue/BrCriteria?issueId=' + Issue.Id() }">Criteria</a>
                    <a data-bind="attr: { href: '/Issue/BrAlternatives?issueId=' + Issue.Id() }">Alternatives</a>
                <!-- /ko -->
                <!-- ko if: Issue.Status() == 'BRAINSTORMING2' -->
                <p>Brainstorming</p>
                    <a data-bind="attr: { href: '/Issue/CriteriaRating?issueId=' + Issue.Id() }">Criteria Weighting</a>
                    <a data-bind="attr: { href: '/Issue/BrAlternatives?issueId=' + Issue.Id() }">Alternatives</a>
                <!-- /ko -->
                <!-- ko if: Issue.Status() == 'EVALUATING' -->
                    <a data-bind="attr: { href: '/Issue/Evaluation?issueId=' + Issue.Id() }">Evaluating</a>
                <!-- /ko -->
                <!-- ko if: Issue.Status() == 'DECIDING' -->
                    <a data-bind="attr: { href: '/Issue/Decision?issueId=' + Issue.Id() }">Deciding</a>
                <!-- /ko -->
                <!-- ko if: Issue.Status() == 'FINISHED' -->
                    <a data-bind="attr: { href: '/Issue/Decision?issueId=' + Issue.Id() }">Finished</a>
                <!-- /ko -->
            </td>
            <td class="td-center-top">
                <div data-bind="if: SelfAssessmentActionRequired">
                    <a data-bind="attr: { href: '/Issue/Creating?issueId=' + Issue.Id() }" class="actionrequired">Update Selfassessment!</a>
                </div>
                <div data-bind="if: CriteriaActionRatingRequired">
                    <a data-bind="attr: { href: '/Issue/CriteriaRating?issueId=' + Issue.Id() }" class="actionrequired">Weight Criteria!</a>
                </div>
                <div data-bind="if: EvaluationActionRequired" class="actionrequired">
                    <a data-bind="attr: { href: '/Issue/Evaluation?issueId=' + Issue.Id() }" class="actionrequired">Evaluate Alternatives!</a>
                </div>
            </td>
            <td class="td-center-top">
                <div class="ttip-large">
                    <label data-bind="text: UnreadCoreItemsCount, css: {actionrequired: newIssue, animated: newIssue, infinite: newIssue, flash: newIssue }"></label>
                    <!-- ko if: UnreadCoreItemsCount() > 0 -->
                    <span class="tooltiptext" data-bind="foreach: UnreadCoreItems">
                        <p data-bind="text: $data"></p>
                    </span>
                    <!-- /ko -->
                </div>
            </td>
            <td data-bind="foreach: Issue.Tags">
                <a data-bind="text: Name" class="tag"></a>
            </td>
        </tr>
    </tbody>
</table>

@*signalR reference*@
<script src="~/Scripts/jquery.signalR-2.2.0.min.js"></script>
<script src="~/signalr/hubs"></script>
<script type="text/javascript">
    var viewModelJs = @Html.Raw(Json.Encode(Model.Value));
    var userId = @Model.Key;
    for (var i = 0; i < viewModelJs.length; i++){
        var newIssue = false;
        viewModelJs[i].treegrid = 'treegrid-' + viewModelJs[i].Issue.Id;
        if (viewModelJs[i].Issue.Parent != null && viewModelJs[i].Issue.Parent != ""){
            viewModelJs[i].treegrid = viewModelJs[i].treegrid + ' treegrid-parent-' + viewModelJs[i].Issue.Parent;
        }
        for (var j = 0; j < viewModelJs[i].UnreadCoreItems.length; j++){
            if(viewModelJs[i].UnreadCoreItems[j].indexOf('Issue Information') >= 0){
                newIssue = true;
            }
        }
        viewModelJs[i].newIssue = newIssue
    }
    var viewModel = ko.mapping.fromJS(viewModelJs);
    ko.applyBindings(viewModel);



    $(document).ready(function () {
        //init treegrid
        $('.tree').treegrid({
            expanderExpandedClass: 'glyphicon glyphicon-minus',
            expanderCollapsedClass: 'glyphicon glyphicon-plus'
        });

        //render menues
        var element = document.getElementById("finished-menu");
        element.parentNode.removeChild(element);
        element = document.getElementById("brainstorming-menu");
        element.parentNode.removeChild(element);
        element = document.getElementById("creating-menu");
        element.parentNode.removeChild(element);
        element = document.getElementById("evaluating-menu");
        element.parentNode.removeChild(element);

        //SignalR
        $(function () {
            // Reference the auto-generated proxy for the hub.
            var notificationHub = $.connection.notificationHub;
            // Create a function that the hub can call back to display messages.
            notificationHub.client.userAddedToIssue = function (issue, accessRights, userId) {
                for (var i = 0; i < accessRights.length; i++){
                    if (accessRights[i].UserId == userId){
                        $.ajax({
                            url: '/Issue/GetUserIssueModel?issueId=' + issue.Id + '&userId=' + userId,
                            type: 'POST',
                            contentType: "application/json; charset=utf-8",
                            async: true,
                            processData: false,
                            complete: function (jqXHR, textStatus) {
                                //notific when groupshift
                            },
                            success: function(data, textStatus, jqXHR){
                                var uim = JSON.parse(data)
                                uim.treegrid = 'treegrid-' + uim.Issue.Id
                                uim.newIssue = true
                                if (uim.ParentTitle != null && uim.ParentTitle.length > 0){
                                    uim.treegrid = uim.treegrid + ' treegrid-parent-' + uim.Parent
                                }
                                var uimKo = ko.mapping.fromJS(uim)
                                if (uim.Issue.Parent != null && uim.Issue.Parent > 0){
                                    var idToFind = uim.Issue.Parent
                                    var parentNode = $('#node-' + uim.Issue.Parent)
                                    var parentChildredn = parentNode.treegrid('getChildNodes')
                                    if (parentNode.treegrid('getChildNodes').length > 0){
                                        var ntext = parentChildredn[parentChildredn.length - 1].id
                                        idToFind = parseInt(ntext.substring(5,ntext.length))
                                    }
                                    for (i = 0; i < viewModel().length; i++){
                                        if (idToFind == viewModel()[i].Issue.Id()){
                                            if (i + 1 < viewModel().length){
                                                viewModel.splice(i+1,0,uimKo)
                                            }else{
                                                viewModel.push(uimKo)
                                            }
                                            break;
                                        }
                                    }
                                }else{
                                    viewModel.push(uimKo)
                                }
                                
                                $.notify({
                                    icon: 'glyphicon glyphicon-info-sign',
                                    title: 'New Issue',
                                    message: 'You were added to issue: ' + uim.Issue.Title,
                                    url: '/Issue/Creating?issueId=' + uim.Issue.Id
                                },{
                                    delay: notDelayLong,
                                    type: 'info',
                                    placement: notPlacementCorner,
                                    animate: notAnimate
                                });

                            },
                            error: function(jqXHR, textStatus, errorThrown){

                            }
                        })
                    }
                }
            };

            //notifies clients to update the activity index
            notificationHub.client.updateActivity = function(issueId, userId){
                refreshUserIssueModel(issueId, 'update')
            }

            notificationHub.client.nextStage = function (issueId, status, userId) {
                refreshUserIssueModel(issueId, 'next')
            }

            // Start the connection.
            $.connection.hub.start().done(function () {
                
            });

            function refreshUserIssueModel(issueId, notificationText){
                var idx = -1;
                for (var i = 0; i < viewModel().length; i++){
                    if (viewModel()[i].Issue.Id() == issueId){
                        idx = i;
                    }
                }

                if (idx > -1){
                    $.ajax({
                        url: '/Issue/RefreshUserIssue?issueId=' + issueId + '&userId=' + userId,
                        type: 'POST',
                        contentType: "application/json; charset=utf-8",
                        dataType: 'json',
                        async: true,
                        processData: false,
                        success: function(data, textStatus, jqXHR){
                            var dat = JSON.parse(data);
                            
                            viewModel()[idx].CriteriaActionRatingRequired(dat.CriteriaActionRatingRequired)
                            viewModel()[idx].SelfAssessmentActionRequired(dat.SelfAssessmentActionRequired)
                            viewModel()[idx].EvaluationActionRequired(dat.EvaluationActionRequired)
                            viewModel()[idx].UnreadCoreItemsCount(dat.UnreadCoreItemsCount)
                            
                            //viewModel()[idx].UnreadCoreItems.removeAll()
                            var smaller = 0 ;
                            if ( dat.UnreadCoreItems.length <  viewModel()[idx].UnreadCoreItems().length){
                                smaller = dat.UnreadCoreItems.length
                            }else{
                                smaller = viewModel()[idx].UnreadCoreItems().length
                            }
                            for(var i = 0; i < viewModel()[idx].UnreadCoreItems().length; i++){
                                var x = viewModel()[idx].UnreadCoreItems()[0]
                                viewModel()[idx].UnreadCoreItems.remove(x)
                            }
                            for(var i = 0; i < dat.UnreadCoreItems.length; i++){
                                viewModel()[idx].UnreadCoreItems.push(dat.UnreadCoreItems[i])
                            }

                            viewModel()[idx].Issue.Status(dat.Issue.Status)

                            var nText = ''
                            var nTitle = ''
                            if (notificationText == 'next'){
                                var status =  dat.Issue.Status.toLowerCase();
                                nText = dat.Issue.Title + ' moved to ' + status.charAt(0).toUpperCase() + status.slice(1);
                                nTitle = 'Issue put to next stage!'
                            }else{
                                nText = dat.Issue.Title + ' was refreshed'
                                nTitle = 'Issue refreshed!'
                            }

                            $.notify({
                                icon: 'glyphicon glyphicon-info-sign',
                                title: nTitle,
                                message: nText
                            }, {
                                delay: notDelay,
                                type: 'info',
                                placement: notPlacementCorner,
                                animate: notAnimate
                            });
                        }
                    })    
                }
                
            }
        });
    });
</script>