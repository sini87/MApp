@using PerpetuumSoft.Knockout
@model MApp.Middleware.Models.ProfileModel
@{
    ViewBag.Title = "Userprofile - " + ViewData["Name"];
    var ko = Html.CreateKnockoutContext();
}
<body>
    <div class="container">
        <h2>Userprofile of @ViewData["Name"]</h2>

        <div class="row">
            <div class="col-sm-6">
                <div class="form-group">
                    <label for="email">E-Mail</label>
                    <input class="form-control" @ko.Bind.Value(m => m.Email) id="email" name="Email" type="email" />
                    <label for="firstName">First Name</label>
                    <input type="text" class="form-control" id="firstName" @ko.Bind.Value(m => m.FirstName) />
                    <label for="lastName">Last Name</label>
                    <input type="text" class="form-control" id="lastName" @ko.Bind.Value(m => m.LastName) />
                    @*<label for="password">Password</label>
                    <input id="password" class="form-control" type="password" @ko.Bind.Value(m => m.Password) />*@
                    <label for="secretQuestion">Secret Question</label>
                    <input id="secretQuestion" type="text" class="form-control" @ko.Bind.Value(m => m.SecretQuestion) />
                    <label for="answer">Answer</label>
                    <input id="answer" type="text" class="form-control" @ko.Bind.Value(m => m.Answer) />
                    <label for="stakeholderDescription">Stakeholder Description</label>
                    <input id="stakeholderDescription" type="text" class="form-control" @ko.Bind.Value(m => m.StakeholderDescription) />
                </div>
            </div>
                
            <div class="col-sm-6">
                <input type="text" class="form-control" id="tokenfield" />
            </div>
        </div>
        <button id="save" type="button" class="btn btn-primary" onclick="javascript: onSaveClick()">Save</button>
    </div>
    @ko.Apply(Model)
</body>

<script type="text/javascript">
    var usrProp = []
    //remove menus
    var element = document.getElementById("finished-menu");
    element.parentNode.removeChild(element);
    element = document.getElementById("brainstorming-menu");
    element.parentNode.removeChild(element);
    element = document.getElementById("creating-menu");
    element.parentNode.removeChild(element);
    element = document.getElementById("evaluating-menu");
    element.parentNode.removeChild(element);

    function onSaveClick() {
        var tmpVM = ko.toJS(viewModel)
        
        tmpVM.Properties = usrProp
        ko.utils.postJson("", { ProfileModel: tmpVM })
    }

    $(document).ready(function () {
        var token = [];
        var engine;

        var allProperties = []
        for (var j = 0; j < viewModelJs.AllProperties.length; j++) {
            allProperties.push({ value: viewModelJs.AllProperties[j].Id, label: viewModelJs.AllProperties[j].Name })
        }

        var userProperties = []
        for (var j = 0; j < viewModelJs.Properties.length; j++) {
            userProperties.push({ value: viewModelJs.Properties[j].Id, label: viewModelJs.Properties[j].Name })
        }

        usrProp = viewModelJs.Properties;

        $('#tokenfield')
            .tokenfield({
                autocomplete: {
                    source: allProperties,
                    delay: 100
                },
                showAutocompleteOnFocus: true
            })
            .tokenfield('setTokens', userProperties)
        ;
        
        $('#tokenfield').on('tokenfield:createtoken', function (e) {
            var tokenExists = false
            for (i = 0; i < usrProp.length; i++) {
                if (usrProp[i].Name == e.attrs.label) {
                    tokenExists = true
                    alert('Property already exists')
                }
            }
            if (tokenExists) {
                event.preventDefault();
                event.stopImmediatePropagation();
                return;
            } else {
                if (e.attrs.label == e.attrs.value) {
                    e.attrs.value = -1
                }
                usrProp.push({ Id: e.attrs.value, Name: e.attrs.label })
            }
        });
        $('#tokenfield').on('tokenfield:createtoken', function (e) {
            
        });
        $('#tokenfield').on('tokenfield:removedtoken', function (e) {
            var idx;
            for (i = 0; i < usrProp.length; i++) {
                if (usrProp[i].Id > 0 && parseInt(e.attrs.value) == usrProp[i].Id) {
                    idx = i
                } else if (usrProp[i].Name == e.attrs.label)
                {
                    idx = i
                }
                
            }
            usrProp.splice(idx,1)
        })
    });
</script>